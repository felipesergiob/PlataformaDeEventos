Domain PlataformaEventos {
	Subdomain Eventos // Núcleo do negócio
    Subdomain Usuarios // Gestão de usuários (contexto de apoio)

}

ContextMap {
	contains Eventos
	contains Usuarios
	
	Eventos Shared-Kernel Usuarios
}

BoundedContext Eventos implements Eventos{
	Aggregate Evento{
		Entity Evento {
			aggregateRoot
			
			-EventoId id
			String nome
			String descricao
			LocalDateTime dataInicio
			LocalDateTime dataFim
			String local
			Integer inscritos
			-UsuarioId organizador
			String genero
			BigDecimal valor
			-Status status
			
			def boolean jaOcorreu();
			def boolean aindaNaoOcorreu();
			def void incrementarInscritos();
			def void decrementarInscritos();
			
			Repository EventoRepository {
				void salvar(@Evento evento);
                @Evento obter(@EventoId id);
                List<@Evento> listarTodos();
                List<@Evento> listarPorOrganizador(@UsuarioId id);
                List<@Evento> listarSalvos(@UsuarioId id);
                List<@Evento> listarConfirmados(@UsuarioId id);
                List<@Evento> listarPorFiltros(String genero, LocalTime horarioInicio, LocalTime horarioFim, LocalDate data, BigDecimal preco);
                boolean usuarioParticipouDoEvento(@UsuarioId usuarioId, @EventoId eventoId);
			}		
		}
		
		ValueObject EventoId {
			int id
		}
		
		enum Status {
			SALVO,
			CONFIRMADO,
			CANCELADO
		}
		
		Service EventoService {
            void salvar(@Evento evento);
            @Evento obter(@EventoId id);
            List<@Evento> listarTodos();
            List<@Evento> listarPorOrganizador(@UsuarioId organizador);
            List<@Evento> listarSalvos(@UsuarioId usuarioId);
            List<@Evento> listarConfirmados(@UsuarioId usuarioId);
            List<@Evento> listarPorGenero(String genero);
            List<@Evento> listarEventosPorFiltros(String genero, LocalTime horarioInicio, LocalTime horarioFim, LocalDate data, BigDecimal preco);
            boolean usuarioParticipouDoEvento(@UsuarioId usuarioId, @EventoId eventoId);
            void excluir(@EventoId id);
            void incrementarInscritos(@EventoId id);
            void decrementarInscritos(@EventoId id);
        }
		
	}
	
	Aggregate Avaliacao {
		Entity Avaliacao {
			aggregateRoot

            -AvaliacaoId id
            -EventoId eventoId
            -UsuarioId usuarioId
            Integer nota
            String comentario
            LocalDateTime dataAvaliacao
            Boolean ativo

            def boolean estaAtiva();

            Repository AvaliacaoRepository {
                void salvar(@Avaliacao avaliacao);
                @Avaliacao obter(@AvaliacaoId id);
                List<@Avaliacao> listarPorEvento(@EventoId eventoId);
                List<@Avaliacao> listarPorUsuario(@UsuarioId usuarioId);
                List<@Avaliacao> listarAtivas();
                double calcularMediaPorEvento(@EventoId eventoId);
            }
		}
		
		ValueObject AvaliacaoId {
			int id
		}
		
		Service AvaliacaoService {
			void salvar(@Avaliacao avaliacao);
            @Avaliacao obter(@AvaliacaoId id);
            List<@Avaliacao> listarPorEvento(@EventoId eventoId);
            List<@Avaliacao> listarPorUsuario(@UsuarioId usuarioId);
            List<@Avaliacao> listarAtivas();
            double calcularMediaPorEvento(@EventoId eventoId);
            void excluir(@AvaliacaoId id);
            boolean usuarioJaAvaliou(@UsuarioId usuarioId, @EventoId eventoId);
		}
	
	}
	
	Aggregate Comentario {
		Entity Comentario {
			aggregateRoot

            -ComentarioId id
            String texto
            LocalDateTime dataCriacao
            -EventoId eventoId
            -UsuarioId autorId
            -ComentarioId comentarioPaiId nullable

            def boolean isResposta();

            Repository ComentarioRepository {
                void salvar(@Comentario comentario);
                @Comentario obter(@ComentarioId id);
                List<@Comentario> listarPorEvento(@EventoId eventoId);
                List<@Comentario> listarPorUsuario(@UsuarioId usuarioId);
                List<@Comentario> listarRespostas(@ComentarioId comentarioPaiId);
                List<@Comentario> listarComentariosPrincipais(@EventoId eventoId);
            }
		}
		
		ValueObject ComentarioId{
			String id
		}
		
		Service ComentarioService {
            void salvar(@Comentario comentario);
            @Comentario obter(@ComentarioId id);
            List<@Comentario> listarPorEvento(@EventoId eventoId);
            List<@Comentario> listarPorUsuario(@UsuarioId usuarioId);
            List<@Comentario> listarRespostas(@ComentarioId comentarioPaiId);
            List<@Comentario> listarComentariosPrincipais(@EventoId eventoId);
            void excluir(@ComentarioId id);
            void responder(@ComentarioId comentarioPaiId, @Comentario resposta);
        }
	}
	
	Aggregate Publicacao {
		Entity Publicacao {
			aggregateRoot

            -PublicacaoId id
            -UsuarioId autorId
            -EventoId eventoId
            String conteudo
            List<String> fotos
            LocalDateTime dataCriacao

            def void adicionarFoto(String urlFoto);

            Repository PublicacaoRepository {
                void salvar(@Publicacao publicacao);
                @Publicacao obter(@PublicacaoId id);
                List<@Publicacao> listarPorEvento(@EventoId eventoId);
                List<@Publicacao> listarPorUsuario(@UsuarioId usuarioId);
            }
		}
		
		ValueObject PublicacaoId {
			UUID valor
		}
		
		Service PublicacaoService {
            void salvar(@Publicacao publicacao);
            @Publicacao obter(@PublicacaoId id);
            List<@Publicacao> listarPorEvento(@EventoId eventoId);
            List<@Publicacao> listarPorUsuario(@UsuarioId usuarioId);
            void excluir(@PublicacaoId id);
            void adicionarFoto(@PublicacaoId publicacaoId, String urlFoto);
        }
	}	
}

//SUPORTING SUBDOMAIN - Contexto de apoio
BoundedContext Usuarios implements Usuarios{
	
	Aggregate Usuario {
		Entity Usuario {
			aggregateRoot

            -UsuarioId id
            String nome
            String emailUsuario
            String senha
            String telefone
            String fotoPerfil nullable
            List<UsuarioId> seguidores

            def boolean jaSegueUsuario(@UsuarioId id);
            def void seguirUsuario(@UsuarioId id);
            def void incrementarSeguidores(@UsuarioId id);

            Repository UsuarioRepository {
                void salvar(@Usuario usuario);
                void obter(@UsuarioId id);
                void seguirUsuario(@UsuarioId id, @UsuarioId idSeguido);
                List<@Usuario> listarTodos();
            }
		}
		
		ValueObject UsuarioId {
			int id
		}
		
		Service UsuarioService {
            void salvar(@Usuario usuario);
            @Usuario obter(@UsuarioId id);
            List<@Usuario> listarTodos();
            void seguirUsuario(@UsuarioId seguidorId, @UsuarioId seguidoId);
            List<@Usuario> obterSeguidores(@UsuarioId usuarioId);
            boolean jaSegueUsuario(@UsuarioId seguidorId, @UsuarioId seguidoId);
            @Usuario buscarPorEmail(String emailUsuario);
            boolean validarCredenciais(String emailUsuario, String senha);
            void excluir(@UsuarioId id);
        }
	}
}