Domain Eventos {
	Subdomain GestaoUsuarios
    Subdomain GestaoEventos
}

ContextMap EventosContextMap {
	contains GestaoUsuarios
	contains GestaoEventos

	GestaoUsuarios Shared-Kernel GestaoEventos
}

BoundedContext GestaoUsuarios implements GestaoUsuarios {
    Aggregate Usuario {
        Entity Usuario {
            aggregateRoot
            
            -UsuarioId id
            String nome
            String emailUsuario
            String senha
            LocalDateTime dataCadastro
            List<UsuarioId> seguindo
            List<UsuarioId> seguidores
            Boolean isOrganizador

            def void seguirUsuario(@UsuarioId usuarioId);
            def void pararSeguir(@UsuarioId usuarioId);

            Repository UsuarioRepository {
                void adicionar(@Usuario usuario);
                void remover(@Usuario usuario);
                @Usuario buscarPorId(@UsuarioId id);
                List<@Usuario> listarUsuarios();
            }
        }

        ValueObject UsuarioId {
            long id
        }
    }
    Aggregate Relato {
    	Entity Relato{
    		aggregateRoot
    		
    		String titulo
    		String conteudo
    		-UsuarioId autorId
    		LocalDateTime dataCriacao
    		List<Foto> fotos
    		String eventoId
    		
    		def void adicionarFoto(Foto foto);
    		def boolean isValid();
    	}
    	
    	Entity Foto {
    		String urlFoto
    		String descricao
    	}
    }
}

BoundedContext GestaoEventos implements GestaoEventos {
    Aggregate Evento {
        Entity Evento {
            aggregateRoot
            
            -EventoId id
            String titulo
            String descricao
            LocalDateTime dataHora
            String local
            BigDecimal preco
            String genero
            -UsuarioId organizadorId
            List<UsuarioId> participantes
            List<UsuarioId> interessados
            List<UsuarioId> talvezVao
            int limiteParticipantes
            -UsuarioId criadorId
            String status
            int totalConfirmacoes
            int totalTalvez
            int totalAvaliacoes
            double mediaNotas
            int totalComentarios
            Set<UsuarioId> usuariosConfirmados
            String data

            def boolean adicionarParticipante(@UsuarioId participanteId);
            def boolean adicionarInteressado(@UsuarioId usuarioId);
            def boolean adicionarTalvezVai(@UsuarioId usuarioId);
            def void adicionarUsuarioConfirmado(@UsuarioId usuarioId);
            def boolean verificarDisponibilidade();
            def void marcarInteresse(@UsuarioId interessadoId);
            def void marcarTalvez(@UsuarioId usuarioId);
            def boolean isFinalizado();
            def Map<String, Object> gerarRelatorio();
            def Map<String, Object> gerarRelatorio(String periodo);

            Repository EventoRepository {
                void adicionar(@Evento evento);
                void remover(@Evento evento);
                @Evento buscarPorId(@EventoId id);
                List<@Evento> listarEventos();
                List<@Evento> filtrarPorData(LocalDate data);
                List<@Evento> filtrarPorGenero(String genero);
                List<@Evento> filtrarPorPreco(BigDecimal precoMin, BigDecimal precoMax);
            }
        }
        
        Entity Avaliacao {
    		-EventoId eventoId
    		-UsuarioId usuarioId
    		int nota
    		String comentario
    		LocalDateTime dataAvaliacao
    		
    		def boolean validarNota();
    	}
    	
        Entity ItemPerdido {
            -EventoId eventoId
            -UsuarioId usuarioId
            String tipo
            String cor
            String descricao
            String localAproximado
            String foto
            LocalDateTime dataReporte
            boolean devolvido

            def void marcarComoDevolvido();
            def boolean isValid();
        }
        
        Entity Comentario {
            -UsuarioId autorId
            String conteudo
            LocalDateTime data
            List<Resposta> respostas

            def void adicionarResposta(@Resposta resposta);
            def void removerResposta(@Resposta resposta);
        }
        
        Entity Resposta{
        	-UsuarioId autorId
        	String conteudo
        	LocalDateTime data
        }

        ValueObject EventoId {
            long id
        }
        
        ValueObject UsuarioId {
            long id
        }
    }
    
    Aggregate Calendario {
        Entity Calendario {
            aggregateRoot
            
            -CalendarioId id
            -UsuarioId usuarioId
            List<EventoId> eventos
            Map<LocalDate, List<EventoId>> eventosPorData
            
            def void adicionarEvento(@EventoId eventoId);
            def void removerEvento(@EventoId eventoId);
            def List<EventoId> listarEventosPorData(LocalDate data);
            def List<EventoId> listarEventosPorPeriodo(LocalDate dataInicio, LocalDate dataFim);
            def void sincronizarEventos();
            
            Repository CalendarioRepository {
                void salvar(@Calendario calendario);
                @Calendario buscarPorUsuarioId(@UsuarioId usuarioId);
                void atualizar(@Calendario calendario);
            }
        }
        
        ValueObject CalendarioId {
            long id
        }
        
        Service CalendarioService {
            @Calendario criarCalendario(@UsuarioId usuarioId);
            void sincronizarCalendario(@CalendarioId calendarioId);
            List<@EventoId> listarEventosProximos(@UsuarioId usuarioId, int dias);
        }
    }

    Aggregate Relatorio {
    	Entity DashboardEvento {
    		aggregateRoot
    		
            -EventoId eventoId
            int totalParticipantes
            int totalInteressados
            double mediaAvaliacoes
            List<Avaliacao> avaliacoes
            List<Relato> relatos
            List<ItemPerdido> itensPerdidos

            def void atualizarMetricas();
            def void gerarRelatorio();
        }
        
        Service RelatorioService {
            List<@EventoId> listarEventosDestaque();
            @DashboardEvento gerarDashboard(@EventoId eventoId);
        }
    }
}
