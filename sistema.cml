Domain Eventos {
	Subdomain GestaoUsuarios
    Subdomain GestaoEventos
    Subdomain GestaoInteracoes
}

ContextMap EventosContextMap {
	contains GestaoUsuarios
	contains GestaoEventos
	contains GestaoInteracoes

	GestaoUsuarios Shared-Kernel GestaoEventos
	GestaoEventos Shared-Kernel GestaoInteracoes
	GestaoUsuarios Shared-Kernel GestaoInteracoes
}

BoundedContext GestaoUsuarios implements GestaoUsuarios {
    Aggregate Usuario {
        Entity Usuario {
            aggregateRoot

            -UsuarioId id
            String nome
            String email
            String senha
            LocalDateTime dataCadastro
            List<UsuarioId> seguindo
            List<UsuarioId> seguidores
            Boolean isOrganizador

            def void seguirUsuario(@UsuarioId usuarioId);
            def void pararSeguir(@UsuarioId usuarioId);
        }

        ValueObject UsuarioId {
            long id
        }
    }
}

BoundedContext GestaoEventos implements GestaoEventos {
    Aggregate Evento {
        Entity Evento {
            aggregateRoot

            -EventoId id
            String titulo
            String descricao
            LocalDateTime dataHora
            String local
            BigDecimal preco
            String genero
            -UsuarioId organizadorId
            List<UsuarioId> participantes
            List<UsuarioId> interessados
            List<UsuarioId> talvezVao
            int limiteParticipantes
            -UsuarioId criadorId
            String status
            int totalConfirmacoes
            int totalTalvez
            int totalAvaliacoes
            double mediaNotas
            int totalComentarios
            Set<UsuarioId> usuariosConfirmados
            String data

            def boolean adicionarParticipante(@UsuarioId participanteId);
            def boolean adicionarInteressado(@UsuarioId usuarioId);
            def boolean adicionarTalvezVai(@UsuarioId usuarioId);
            def void adicionarUsuarioConfirmado(@UsuarioId usuarioId);
            def boolean verificarDisponibilidade();
            def void marcarInteresse(@UsuarioId interessadoId);
            def void marcarTalvez(@UsuarioId usuarioId);
            def boolean isFinalizado();
            def Map<String, Object> gerarRelatorio();
            def Map<String, Object> gerarRelatorio(String periodo);
        }

        ValueObject EventoId {
            long id
        }

        ValueObject UsuarioId {
            long id
        }
    }

    Aggregate Relatorio {
    	Entity DashboardEvento {
    		aggregateRoot

            -EventoId eventoId
            int totalParticipantes
            int totalInteressados
            double mediaAvaliacoes
            List<Avaliacao> avaliacoes
            List<Relato> relatos
            List<ItemPerdido> itensPerdidos

            def void atualizarMetricas();
            def void gerarRelatorio();
        }
    }
}

BoundedContext GestaoInteracoes implements GestaoInteracoes {
    Aggregate Avaliacao {
        Entity Avaliacao {
            aggregateRoot

            -EventoId eventoId
            -UsuarioId usuarioId
            int nota
            String comentario
            LocalDateTime dataAvaliacao
            boolean moderada
            String statusModeracao
            LocalDateTime dataModeracao
            String motivoRejeicao
            int likes
            List<UsuarioId> usuariosQueCurtiram

            def boolean validarNota();
            def boolean isValid();
            def boolean podeSerModerada();
            def void moderar(String status, String motivo);
            def boolean podeSerEditada();
            def void curtir(@UsuarioId usuarioId);
            def void removerCurtida(@UsuarioId usuarioId);
            def boolean isAprovada();
            def boolean isRejeitada();
            def void validar();
        }
    }

    Aggregate ItemPerdido {
        Entity ItemPerdido {
            aggregateRoot

            -EventoId eventoId
            -UsuarioId usuarioId
            String tipo
            String cor
            String descricao
            String localAproximado
            String foto
            LocalDateTime dataReporte
            boolean devolvido

            def void marcarComoDevolvido();
            def boolean isValid();
        }
    }

    Aggregate Relato {
        Entity Relato {
            aggregateRoot

            String titulo
            String conteudo
            -UsuarioId autorId
            LocalDateTime dataCriacao
            List<Foto> fotos
            String eventoId

            def void adicionarFoto(@Foto foto);
            def boolean isValid();
        }

        Entity Foto {
            String urlFoto
            String descricao
        }
    }

    Aggregate Comentario {
        Entity Comentario {
            aggregateRoot

            -UsuarioId autorId
            String conteudo
            LocalDateTime data
            List<Resposta> respostas

            def void adicionarResposta(@Resposta resposta);
            def void removerResposta(@Resposta resposta);
        }

        Entity Resposta {
            -UsuarioId autorId
            String conteudo
            LocalDateTime data
        }
    }

    Aggregate Calendario {
        Entity Calendario {
            aggregateRoot

            -UsuarioId usuarioId
            Map<EventoId, TipoInteracao> eventos
            TipoVisualizacao visualizacaoAtual

            def void adicionarEvento(@EventoId eventoId, TipoInteracao tipo);
            def List<EventoId> getEventosPorTipo(TipoInteracao tipo);
            def String getCorDoEvento(@EventoId eventoId);
            def void setVisualizacao(TipoVisualizacao visualizacao);
        }

        ValueObject TipoInteracao {
            String tipo
            String cor
        }

        ValueObject TipoVisualizacao {
            String tipo
        }
    }
}
